{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","secondary","contrastThreshold","tonalOffset","typography","button","textTransform","useStyles","makeStyles","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","paper","padding","textAlign","color","text","background","radioButtons","maxHeight","minHeight","overflow","info","header","footer","footerLink","radioGroup","textField","width","buttonProgress","green","position","top","left","marginTop","marginLeft","sleep","ms","Promise","resolve","setTimeout","emptyNetworkInformation","name","type","location","owner","version","url","App","React","useState","rowmaUrl","setRowmaUrl","rowma","setRowma","undefined","robotUuids","setRobotUuids","selectedRobot","setSelectedRobot","rosrunCommands","setRosrunCommands","selectedRosrunCommand","setSelectedRosrunCommand","roslaunchCommands","setRoslaunchCommands","rosnodes","setRosnodes","rostopics","setRostopics","selectedRoslaunchCommand","setSelectedRoslaunchCommand","selectedRosnode","setSelectedRosnode","selectedRostopic","setSelectedRostopic","setRobot","submitUrlButtonLoading","setSubmitUrlButtonLoading","connectButtonLoading","setConnectButtonLoading","rosrunButtonLoading","setRosrunButtonLoading","roslaunchButtonLoading","setRoslaunchButtonLoading","rosnodeButtonLoading","setRosnodeButtonLoading","rostopicButtonLoading","setRostopicButtonLoading","networkInformation","setNetworkInformation","socket","setSocket","classes","handleConnectNetworkClick","a","_rowma","Rowma","baseURL","getNetworkInformation","networkInfo","data","currentConnectionList","connList","map","robot","uuid","handleRosrunButtonClick","runRosrun","getRobotStatus","_robot","handleRoslaunchButtonClick","runLaunch","handleRosnodeButtonClick","killNodes","status","index","indexOf","splice","handleSubscribeButtonClick","subscribeTopic","className","ThemeProvider","AppBar","Toolbar","Container","src","height","Typography","variant","Grid","container","item","xs","sm","md","Paper","TextField","margin","label","onChange","event","target","value","Button","disabled","onClick","CircularProgress","size","FormControl","component","length","RadioGroup","aria-label","FormControlLabel","control","Radio","connect","then","sock","catch","e","console","log","res","launchCommands","command","node","topic","direction","justify","alignItems","TableContainer","Table","TableBody","TableRow","TableCell","scope","align","Box","fontSize","Link","href","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9d098ff5.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n\nimport { createMuiTheme, makeStyles, ThemeProvider, Theme, createStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport TextField from '@material-ui/core/TextField';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\n\n// @ts-ignore\nimport Rowma from 'rowma_js';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffffff',\n    },\n    secondary: {\n      main: '#38B48B',\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n  typography: {\n    button: {\n      textTransform: 'none'\n    }\n  }\n});\n\nconst useStyles = makeStyles((theme: Theme) => (\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      background: '#fdfdfd'\n    },\n    radioButtons: {\n      maxHeight: 300,\n      minHeight: 300,\n      textAlign: 'center',\n      overflow: 'auto'\n    },\n    info: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      background: '#f6f6f6'\n    },\n    header: {\n      color: theme.palette.text.primary,\n      background: '#fcfcfc'\n    },\n    footer: {\n      textAlign: 'left',\n    },\n    footerLink: {\n      color: '#38B48B',\n      marginRight: '1rem',\n    },\n    radioGroup: {\n      textAlign: 'left',\n    },\n    textField: {\n      width: '60%',\n    },\n    buttonProgress: {\n      color: green[500],\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      marginTop: -12,\n      marginLeft: -12,\n    },\n  })\n));\n\nconst sleep = (ms: number) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\ninterface NetworkInformationInterface {\n  name: string;\n  type: string;\n  location: string;\n  owner: string;\n  version: string;\n  url: string;\n}\n\nconst emptyNetworkInformation: NetworkInformationInterface = {\n  name: '',\n  type: '',\n  location: '',\n  owner: '',\n  version: '',\n  url: ''\n}\n\nconst App: React.FC = () => {\n  const [rowmaUrl, setRowmaUrl] = React.useState<string>(\"https://rocky-peak-54058.herokuapp.com\");\n  const [rowma, setRowma] = React.useState<any>(null);\n  const [robotUuids, setRobotUuids] = React.useState<Array<string> | undefined>(undefined);\n  const [selectedRobot, setSelectedRobot] = React.useState<any | null>(null);\n  const [rosrunCommands, setRosrunCommands] = React.useState<Array<string>>([]);\n  const [selectedRosrunCommand, setSelectedRosrunCommand] = React.useState<string>('');\n  const [roslaunchCommands, setRoslaunchCommands] = React.useState<Array<string>>([]);\n  const [rosnodes, setRosnodes] = React.useState<Array<string>>([]);\n  const [rostopics, setRostopics] = React.useState<Array<string>>([]);\n  const [selectedRoslaunchCommand, setSelectedRoslaunchCommand] = React.useState<string>('');\n  const [selectedRosnode, setSelectedRosnode] = React.useState<string>('');\n  const [selectedRostopic, setSelectedRostopic] = React.useState<string>('');\n  const [robot, setRobot] = React.useState<any>({});\n  const [submitUrlButtonLoading, setSubmitUrlButtonLoading] = React.useState<boolean>(false);\n  const [connectButtonLoading, setConnectButtonLoading] = React.useState<boolean>(false);\n  const [rosrunButtonLoading, setRosrunButtonLoading] = React.useState<boolean>(false);\n  const [roslaunchButtonLoading, setRoslaunchButtonLoading] = React.useState<boolean>(false);\n  const [rosnodeButtonLoading, setRosnodeButtonLoading] = React.useState<boolean>(false);\n  const [rostopicButtonLoading, setRostopicButtonLoading] = React.useState<boolean>(false);\n  const [networkInformation, setNetworkInformation] = React.useState<any>(emptyNetworkInformation);\n\n  const [socket, setSocket] = React.useState<any>(null);\n\n  const classes = useStyles();\n\n  const handleUrlFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowmaUrl((event.target as HTMLInputElement).value);\n  }\n\n  const handleConnectNetworkClick = async () => {\n    setSubmitUrlButtonLoading(true);\n    const _rowma = new Rowma({ baseURL: rowmaUrl })\n    setRowma(_rowma);\n\n    const networkInfo = await _rowma.getNetworkInformation()\n    setNetworkInformation({ url: rowmaUrl, ...networkInfo.data })\n\n    const connList = await _rowma.currentConnectionList()\n    setRobotUuids(connList.data.map((robot: any) => robot.uuid));\n\n    setRobot({})\n    setRosrunCommands([]);\n    setRoslaunchCommands([]);\n    setRostopics([]);\n\n    setSubmitUrlButtonLoading(false);\n  }\n\n  const handleRobotChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRobot((event.target as HTMLInputElement).value);\n  };\n\n  const handleConnectClicked = () => {\n    setConnectButtonLoading(true);\n    rowma.connect(selectedRobot).then((sock: any) => {\n      setSocket(sock)\n    }).catch((e: any) => {\n      console.log(e)\n    })\n\n    rowma.getRobotStatus(selectedRobot).then((res: any) => {\n      setRobot(res.data)\n      setRosnodes(res.data.rosnodes)\n      setRosrunCommands(res.data.rosrunCommands);\n      setRoslaunchCommands(res.data.launchCommands);\n      setRostopics(res.data.rostopics);\n      setConnectButtonLoading(false);\n    })\n  }\n\n  const handleRosrunCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosrunCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRoslaunchCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRoslaunchCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRosrunButtonClick = async () => {\n    setRosrunButtonLoading(true);\n    setRosnodeButtonLoading(true);\n    const rosrunArgs = '';\n    await rowma.runRosrun(socket, selectedRobot, selectedRosrunCommand, rosrunArgs);\n    setRosrunButtonLoading(false);\n    await sleep(2500);\n    const _robot = await rowma.getRobotStatus(selectedRobot)\n    setRosnodes(_robot.data.rosnodes)\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleRoslaunchButtonClick = async () => {\n    setRoslaunchButtonLoading(true);\n    setRosnodeButtonLoading(true);\n    const result = await rowma.runLaunch(socket, selectedRobot, selectedRoslaunchCommand)\n    setRoslaunchButtonLoading(false);\n    await sleep(2500);\n    const _robot = await rowma.getRobotStatus(selectedRobot)\n    setRosnodes(_robot.data.rosnodes)\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleRosnodeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosnode((event.target as HTMLInputElement).value);\n  }\n\n  const handleRosnodeButtonClick = async () => {\n    setRosnodeButtonLoading(true);\n    const result = await rowma.killNodes(socket, selectedRobot, [selectedRosnode]);\n    if (result.status === 'success') {\n      const index = rosnodes.indexOf(selectedRosnode)\n      rosnodes.splice(index, 1);\n    }\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleSubscribeButtonClick = async () => {\n    setRostopicButtonLoading(true);\n    await rowma.subscribeTopic(socket, selectedRobot, 'application', rowma.uuid, selectedRostopic);\n    setRostopicButtonLoading(false);\n  }\n\n  const handleRostopicChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopic((event.target as HTMLInputElement).value);\n  }\n\n  return (\n    <div className={`${classes.root} App`}>\n      <ThemeProvider theme={theme}>\n        <AppBar position=\"static\" className={classes.header}>\n          <Toolbar>\n            <Container className=\"text-left\">\n              <img src=\"/public-console/logo.png\" width=\"28\" height=\"28\" className=\"inline mx-4\" />\n              <Typography variant=\"h5\" className=\"inline align-middle\">Rowma Network Console</Typography>\n            </Container>\n          </Toolbar>\n        </AppBar>\n        <Container>\n          <Grid container spacing={3} className=\"py-8\">\n            <Grid item xs={12} sm={12} md={12}>\n              <Paper className={classes.paper}>\n                <div className=\"flex items-center justify-center\">\n                  <TextField color=\"secondary\" margin=\"dense\" label=\"Network URL\" variant=\"outlined\" className={classes.textField} onChange={handleUrlFieldChange} value={rowmaUrl} />\n                  <div className=\"relative mx-4\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={submitUrlButtonLoading}\n                      onClick={handleConnectNetworkClick}\n                    >\n                      Connect\n                    </Button>\n                    {submitUrlButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select Your Robot{\"'\"}s UUID</Typography>\n                    </div>\n                    {(!robotUuids || (robotUuids && robotUuids.length === 0)) &&\n                      <p>Robot not found...</p>\n                    }\n                    <RadioGroup aria-label=\"robots\" name=\"robots\" value={selectedRobot} onChange={handleRobotChange} className={classes.radioGroup}>\n                    {robotUuids && robotUuids.map(uuid => {\n                      return (\n                        <FormControlLabel value={uuid} control={<Radio />} label={uuid} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={connectButtonLoading || !selectedRobot}\n                    onClick={handleConnectClicked}\n                  >\n                    Connect\n                  </Button>\n                  {connectButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select a rosrun command</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rosrun\" name=\"rosrun\" value={selectedRosrunCommand} onChange={handleRosrunCommandChange} className={classes.radioGroup}>\n                    {rosrunCommands && rosrunCommands.map(command => {\n                      return (\n                        <FormControlLabel value={command} control={<Radio />} label={command} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rosrunButtonLoading || selectedRosrunCommand === ''}\n                    onClick={handleRosrunButtonClick}\n                  >\n                    Execute\n                  </Button>\n                  {rosrunButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select a roslaunch command</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"roslaunch\" name=\"roslaunch\" value={selectedRoslaunchCommand} onChange={handleRoslaunchCommandChange} className={classes.radioGroup}>\n                    {roslaunchCommands && roslaunchCommands.map(command => {\n                      return (\n                        <FormControlLabel value={command} control={<Radio />} label={command} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={roslaunchButtonLoading || selectedRoslaunchCommand === ''}\n                    onClick={handleRoslaunchButtonClick}\n                  >\n                    Execute\n                  </Button>\n                  {roslaunchButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Running ROS nodes</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rosnodes\" name=\"rosnodes\" value={selectedRosnode} onChange={handleRosnodeChange} className={classes.radioGroup}>\n                    {rosnodes && rosnodes.map((node: any) => {\n                      return (\n                        <FormControlLabel value={node} control={<Radio />} label={node} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rosnodeButtonLoading || selectedRosnode === ''}\n                    onClick={handleRosnodeButtonClick}\n                  >\n                    Kill\n                  </Button>\n                  {rosnodeButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Subscribe rostopic</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rostopics\" name=\"rostopics\" value={selectedRostopic} onChange={handleRostopicChange} className={classes.radioGroup}>\n                      {rostopics && rostopics.map((topic: any) => {\n                        return (\n                          <FormControlLabel value={topic} control={<Radio />} label={topic} />\n                        )\n                      })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rostopicButtonLoading || selectedRostopic === ''}\n                    onClick={handleSubscribeButtonClick}\n                  >\n                    Subscribe\n                  </Button>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                <div>\n                  <p>Send (Topic Selectbox) from (Robot Selectbox) to (Robot Selectbox)</p>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Paper className={classes.info}>\n                <div className=\"my-4\">\n                  <Typography variant=\"h6\">Network Information</Typography>\n                </div>\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Grid item xs={12} sm={12} md={6}>\n                    <TableContainer className=\"pb-4\">\n                      <Table aria-label=\"simple table\">\n                        <TableBody>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Name</TableCell>\n                            <TableCell align=\"right\">{networkInformation.name}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Type</TableCell>\n                            <TableCell align=\"right\">{networkInformation.type}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network URL</TableCell>\n                            <TableCell align=\"right\">{networkInformation.url}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Location</TableCell>\n                            <TableCell align=\"right\">{networkInformation.location}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Owner</TableCell>\n                            <TableCell align=\"right\">{networkInformation.owner}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Version</TableCell>\n                            <TableCell align=\"right\">{networkInformation.version}</TableCell>\n                          </TableRow>\n\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Box className={classes.footer} fontSize={16}>\n                <Link className={classes.footerLink} href=\"\">How to Use This Page</Link>\n                <Link className={classes.footerLink} href=\"https://rowma.github.io/documentation/en/getting-started\">Documentation</Link>\n                <Link className={classes.footerLink} href=\"https://github.com/rowma/rowma\">GitHub</Link>\n              </Box>\n            </Grid>\n\n          </Grid>\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './tailwind.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}