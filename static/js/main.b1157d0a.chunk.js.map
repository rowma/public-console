{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","secondary","contrastThreshold","tonalOffset","typography","button","textTransform","useStyles","makeStyles","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","paper","padding","textAlign","color","text","rowma","Rowma","baseURL","App","React","useState","undefined","robotUuids","setRobotUuids","selectedRobot","setSelectedRobot","rosrunCommands","setRosrunCommands","selectedRosrunCommand","setSelectedRosrunCommand","roslaunchCommands","setRoslaunchCommands","selectedRoslaunchCommand","setSelectedRoslaunchCommand","setRobot","connectButtonColor","setConnectButtonColor","connectButtonText","setConnectButtonText","socket","setSocket","useEffect","currentConnectionList","then","res","console","log","data","map","robot","uuid","classes","className","ThemeProvider","AppBar","position","Toolbar","Container","Typography","variant","Grid","container","item","xs","Paper","FormControl","component","RadioGroup","aria-label","name","value","onChange","event","target","FormControlLabel","control","Radio","label","Button","onClick","connect","sock","catch","e","getRobotStatus","command","runRosrun","runLaunch","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b1157d0a.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n\nimport { createMuiTheme, makeStyles, ThemeProvider, Theme, createStyles } from '@material-ui/core/styles';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\n\n// @ts-ignore\nimport Rowma from 'rowma_js';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffffff',\n    },\n    secondary: {\n      main: '#ED4A70',\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n  typography: {\n    button: {\n      textTransform: 'none'\n    }\n  }\n});\n\nconst useStyles = makeStyles((theme: Theme) => (\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  })\n));\n\nconst rowma = new Rowma({ baseURL: 'https://rocky-peak-54058.herokuapp.com' });\n\nconst App: React.FC = () => {\n  const [robotUuids, setRobotUuids] = React.useState<Array<string> | undefined>(undefined);\n  const [selectedRobot, setSelectedRobot] = React.useState<any | null>(null);\n  const [rosrunCommands, setRosrunCommands] = React.useState<Array<string>>([]);\n  const [selectedRosrunCommand, setSelectedRosrunCommand] = React.useState<string>('');\n  const [roslaunchCommands, setRoslaunchCommands] = React.useState<Array<string>>([]);\n  const [selectedRoslaunchCommand, setSelectedRoslaunchCommand] = React.useState<string>('');\n  const [robot, setRobot] = React.useState<any>({});\n  const [connectButtonColor, setConnectButtonColor] = React.useState<any>('primary');\n  const [connectButtonText, setConnectButtonText] = React.useState<any>('Connect');\n\n  const [socket, setSocket] = React.useState<any>(null);\n\n  useEffect(() => {\n    if (robotUuids === undefined) {\n      rowma.currentConnectionList().then((res: any) => {\n        console.log(res.data)\n        setRobotUuids(res.data.map((robot: any) => robot.uuid));\n      })\n    }\n  });\n\n  const classes = useStyles();\n\n  const handleRobotChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRobot((event.target as HTMLInputElement).value);\n  };\n\n  const handleConnectClicked = () => {\n    rowma.connect(selectedRobot).then((sock: any) => {\n      setSocket(sock)\n    }).catch((e: any) => {\n      console.log(e)\n    })\n\n    rowma.getRobotStatus(selectedRobot).then((res: any) => {\n      console.log(res.data)\n      setRobot(res.data)\n      setRosrunCommands(res.data['rosrunCommands']);\n      setRoslaunchCommands(res.data['launchCommands']);\n      setConnectButtonColor('secondary');\n      setConnectButtonText('Disconnect');\n    })\n  }\n\n  const handleRosrunCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosrunCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRoslaunchCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRoslaunchCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRosrunButtonClick = () => {\n    const rosrunArgs = '';\n    rowma.runRosrun(socket, selectedRobot, selectedRosrunCommand, rosrunArgs);\n  }\n\n  const handleRoslaunchButtonClick = () => {\n    rowma.runLaunch(socket, selectedRobot, selectedRoslaunchCommand)\n  }\n\n  return (\n    <div className={`${classes.root} App`}>\n      <ThemeProvider theme={theme}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Container>\n              <Typography variant=\"h5\">Rowma Network Console</Typography>\n            </Container>\n          </Toolbar>\n        </AppBar>\n        <Container>\n          <Grid container spacing={3}>\n            <Grid item xs={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\">\n                    <Typography variant='h5'>Select Your Robot{\"'\"}s UUID</Typography>\n                    <RadioGroup aria-label=\"robots\" name=\"robots\" value={selectedRobot} onChange={handleRobotChange}>\n                    {robotUuids && robotUuids.map(uuid => {\n                      return (\n                        <FormControlLabel value={uuid} control={<Radio />} label={uuid} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div>\n                  <Button variant=\"contained\" color={connectButtonColor} onClick={handleConnectClicked}>\n                    {connectButtonText}\n                  </Button>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\">\n                    <Typography variant='h5'>Select a rosrun command</Typography>\n                    <RadioGroup aria-label=\"rosrun\" name=\"rosrun\" value={selectedRosrunCommand} onChange={handleRosrunCommandChange}>\n                    {rosrunCommands && rosrunCommands.map(command => {\n                      return (\n                        <FormControlLabel value={command} control={<Radio />} label={command} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div>\n                  <Button variant=\"contained\" color=\"primary\" onClick={handleRosrunButtonClick}>\n                    Execute\n                  </Button>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\">\n                    <Typography variant='h5'>Select a roslaunch command</Typography>\n                    <RadioGroup aria-label=\"roslaunch\" name=\"roslaunch\" value={selectedRoslaunchCommand} onChange={handleRoslaunchCommandChange}>\n                    {roslaunchCommands && roslaunchCommands.map(command => {\n                      return (\n                        <FormControlLabel value={command} control={<Radio />} label={command} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div>\n                  <Button variant=\"contained\" color=\"primary\" onClick={handleRoslaunchButtonClick}>\n                    Execute\n                  </Button>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                <div>\n                  <p>Send (Topic Selectbox) from (Robot Selectbox) to (Robot Selectbox)</p>\n                </div>\n              </Paper>\n            </Grid>\n\n          </Grid>\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}