{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","secondary","contrastThreshold","tonalOffset","typography","button","textTransform","useStyles","makeStyles","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","paper","padding","textAlign","color","text","background","radioButtons","maxHeight","minHeight","overflow","info","header","footer","footerLink","radioGroup","textField","width","buttonProgress","green","position","top","left","marginTop","marginLeft","sleep","ms","Promise","resolve","setTimeout","emptyNetworkInformation","name","type","location","owner","version","url","App","React","useState","rowmaUrl","setRowmaUrl","rowma","setRowma","undefined","robotUuids","setRobotUuids","selectedRobot","setSelectedRobot","rosrunCommands","setRosrunCommands","selectedRosrunCommand","setSelectedRosrunCommand","roslaunchCommands","setRoslaunchCommands","rosnodes","setRosnodes","rostopics","setRostopics","topicMsg","setTopicMsg","selectedRoslaunchCommand","setSelectedRoslaunchCommand","selectedRosnode","setSelectedRosnode","selectedRostopic","setSelectedRostopic","selectedRostopicForPublish","setSelectedRostopicForPublish","selectedRostopicForUnsubscribe","setSelectedRostopicForUnsubscribe","setRobot","submitUrlButtonLoading","setSubmitUrlButtonLoading","connectButtonLoading","setConnectButtonLoading","rosrunButtonLoading","setRosrunButtonLoading","roslaunchButtonLoading","setRoslaunchButtonLoading","rosnodeButtonLoading","setRosnodeButtonLoading","rostopicButtonLoading","setRostopicButtonLoading","rostopicForPublishButtonLoading","setRostopicForPublishButtonLoading","rostopicForUnsubscribeButtonLoading","setRostopicForUnsubscribeButtonLoading","networkInformation","setNetworkInformation","items","setItems","socket","setSocket","classes","handleConnectNetworkClick","a","_rowma","Rowma","baseURL","getNetworkInformation","networkInfo","data","currentConnectionList","connList","map","robot","uuid","handleOnTopicArrival","event","msg","handleRosrunButtonClick","runRosrun","getRobotStatus","_robot","handleRoslaunchButtonClick","runLaunch","handleRosnodeButtonClick","killNodes","status","index","indexOf","splice","handleSubscribeButtonClick","subscribeTopic","Row","style","className","getItemSize","length","handlePublishButtonClick","JSON","parse","publishTopic","ThemeProvider","AppBar","Toolbar","Container","src","height","Typography","variant","Grid","container","item","xs","sm","md","Paper","TextField","margin","label","onChange","target","value","Button","disabled","onClick","CircularProgress","size","FormControl","component","RadioGroup","aria-label","FormControlLabel","control","Radio","connect","then","sock","on","catch","e","console","log","res","launchCommands","command","node","topic","itemCount","itemSize","initialScrollOffset","unsubscribeTopic","multiline","rows","placeholder","fullWidth","direction","justify","alignItems","TableContainer","Table","TableBody","TableRow","TableCell","scope","align","Box","fontSize","Link","href","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fdedd2a2.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n\nimport { createMuiTheme, makeStyles, ThemeProvider, Theme, createStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\n\nimport { VariableSizeList } from 'react-window';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport TextField from '@material-ui/core/TextField';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\n\n// @ts-ignore\nimport Rowma from 'rowma_js';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffffff',\n    },\n    secondary: {\n      main: '#38B48B',\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n  typography: {\n    button: {\n      textTransform: 'none'\n    }\n  }\n});\n\nconst useStyles = makeStyles((theme: Theme) => (\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      background: '#fdfdfd'\n    },\n    radioButtons: {\n      maxHeight: 300,\n      minHeight: 300,\n      textAlign: 'center',\n      overflow: 'auto'\n    },\n    info: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      background: '#f6f6f6'\n    },\n    header: {\n      color: theme.palette.text.primary,\n      background: '#fcfcfc'\n    },\n    footer: {\n      textAlign: 'left',\n    },\n    footerLink: {\n      color: '#38B48B',\n      marginRight: '1rem',\n    },\n    radioGroup: {\n      textAlign: 'left',\n    },\n    textField: {\n      width: '60%',\n    },\n    buttonProgress: {\n      color: green[500],\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      marginTop: -12,\n      marginLeft: -12,\n    },\n  })\n));\n\nconst sleep = (ms: number) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\ninterface NetworkInformationInterface {\n  name: string;\n  type: string;\n  location: string;\n  owner: string;\n  version: string;\n  url: string;\n}\n\nconst emptyNetworkInformation: NetworkInformationInterface = {\n  name: '',\n  type: '',\n  location: '',\n  owner: '',\n  version: '',\n  url: ''\n}\n\nconst App: React.FC = () => {\n  const [rowmaUrl, setRowmaUrl] = React.useState<string>(\"https://rocky-peak-54058.herokuapp.com\");\n  const [rowma, setRowma] = React.useState<any>(null);\n  const [robotUuids, setRobotUuids] = React.useState<Array<string> | undefined>(undefined);\n  const [selectedRobot, setSelectedRobot] = React.useState<any | null>(null);\n  const [rosrunCommands, setRosrunCommands] = React.useState<Array<string>>([]);\n  const [selectedRosrunCommand, setSelectedRosrunCommand] = React.useState<string>('');\n  const [roslaunchCommands, setRoslaunchCommands] = React.useState<Array<string>>([]);\n  const [rosnodes, setRosnodes] = React.useState<Array<string>>([]);\n  const [rostopics, setRostopics] = React.useState<Array<string>>([]);\n  const [topicMsg, setTopicMsg] = React.useState<string>('');\n  const [selectedRoslaunchCommand, setSelectedRoslaunchCommand] = React.useState<string>('');\n  const [selectedRosnode, setSelectedRosnode] = React.useState<string>('');\n  const [selectedRostopic, setSelectedRostopic] = React.useState<string>('');\n  const [selectedRostopicForPublish, setSelectedRostopicForPublish] = React.useState<string>('');\n  const [selectedRostopicForUnsubscribe, setSelectedRostopicForUnsubscribe] = React.useState<string>('');\n  const [robot, setRobot] = React.useState<any>({});\n  const [submitUrlButtonLoading, setSubmitUrlButtonLoading] = React.useState<boolean>(false);\n  const [connectButtonLoading, setConnectButtonLoading] = React.useState<boolean>(false);\n  const [rosrunButtonLoading, setRosrunButtonLoading] = React.useState<boolean>(false);\n  const [roslaunchButtonLoading, setRoslaunchButtonLoading] = React.useState<boolean>(false);\n  const [rosnodeButtonLoading, setRosnodeButtonLoading] = React.useState<boolean>(false);\n  const [rostopicButtonLoading, setRostopicButtonLoading] = React.useState<boolean>(false);\n  const [rostopicForPublishButtonLoading, setRostopicForPublishButtonLoading] = React.useState<boolean>(false);\n  const [rostopicForUnsubscribeButtonLoading, setRostopicForUnsubscribeButtonLoading] = React.useState<boolean>(false);\n\n  const [networkInformation, setNetworkInformation] = React.useState<any>(emptyNetworkInformation);\n  const [items, setItems] = React.useState<Array<string>>([]);\n\n  const [socket, setSocket] = React.useState<any>(null);\n\n  const classes = useStyles();\n\n  const handleUrlFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowmaUrl((event.target as HTMLInputElement).value);\n  }\n\n  const handleConnectNetworkClick = async () => {\n    setSubmitUrlButtonLoading(true);\n    const _rowma = new Rowma({ baseURL: rowmaUrl })\n    setRowma(_rowma);\n\n    const networkInfo = await _rowma.getNetworkInformation()\n    setNetworkInformation({ url: rowmaUrl, ...networkInfo.data })\n\n    const connList = await _rowma.currentConnectionList()\n    setRobotUuids(connList.data.map((robot: any) => robot.uuid));\n\n    setRobot({})\n    setRosrunCommands([]);\n    setRoslaunchCommands([]);\n    setRostopics([]);\n\n    setSubmitUrlButtonLoading(false);\n  }\n\n  const handleRobotChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRobot((event.target as HTMLInputElement).value);\n  };\n\n  const handleOnTopicArrival = (event: any) => {\n    setItems(items => [...items, event.msg.data])\n  }\n\n  const handleConnectClicked = () => {\n    setConnectButtonLoading(true);\n    rowma.connect(selectedRobot).then((sock: any) => {\n      setSocket(sock)\n      sock.on('topic_to_device', handleOnTopicArrival)\n    }).catch((e: any) => {\n      console.log(e)\n    })\n\n    rowma.getRobotStatus(selectedRobot).then((res: any) => {\n      setRobot(res.data)\n      setRosnodes(res.data.rosnodes)\n      setRosrunCommands(res.data.rosrunCommands);\n      setRoslaunchCommands(res.data.launchCommands);\n      setRostopics(res.data.rostopics);\n      setConnectButtonLoading(false);\n    })\n  }\n\n  const handleRosrunCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosrunCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRoslaunchCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRoslaunchCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRosrunButtonClick = async () => {\n    setRosrunButtonLoading(true);\n    setRosnodeButtonLoading(true);\n    const rosrunArgs = '';\n    await rowma.runRosrun(socket, selectedRobot, selectedRosrunCommand, rosrunArgs);\n    setRosrunButtonLoading(false);\n    await sleep(2500);\n    const _robot = await rowma.getRobotStatus(selectedRobot)\n    setRosnodes(_robot.data.rosnodes)\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleRoslaunchButtonClick = async () => {\n    setRoslaunchButtonLoading(true);\n    setRosnodeButtonLoading(true);\n    const result = await rowma.runLaunch(socket, selectedRobot, selectedRoslaunchCommand)\n    setRoslaunchButtonLoading(false);\n    await sleep(2500);\n    const _robot = await rowma.getRobotStatus(selectedRobot)\n    setRosnodes(_robot.data.rosnodes)\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleRosnodeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosnode((event.target as HTMLInputElement).value);\n  }\n\n  const handleRosnodeButtonClick = async () => {\n    setRosnodeButtonLoading(true);\n    const result = await rowma.killNodes(socket, selectedRobot, [selectedRosnode]);\n    if (result.status === 'success') {\n      const index = rosnodes.indexOf(selectedRosnode)\n      rosnodes.splice(index, 1);\n    }\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleSubscribeButtonClick = async () => {\n    setRostopicButtonLoading(true);\n    await rowma.subscribeTopic(socket, selectedRobot, 'application', rowma.uuid, selectedRostopic);\n    setRostopicButtonLoading(false);\n  }\n\n  const handleRostopicChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopic((event.target as HTMLInputElement).value);\n  }\n\n  const Row = ({ index, style }: any) => (\n    <div style={style}>\n      <span className=\"p-4\">{items[index]}</span>\n    </div>\n  );\n\n  const getItemSize = (index: number) => {\n    return items[index].length > 60 ? 70 : 30\n  }\n\n  const ListComponent = () => (\n    <VariableSizeList\n      height={300}\n      width={'95%'}\n      itemCount={items.length}\n      itemSize={getItemSize}\n      className=\"border text-left mt-4 mx-4\"\n      initialScrollOffset={items.length * 70}\n    >\n      {Row}\n    </VariableSizeList>\n  );\n\n  const handleUnsubscribeButtonClick = () => {\n    setRostopicForUnsubscribeButtonLoading(true);\n    rowma.unsubscribeTopic(socket, selectedRobot, selectedRostopicForUnsubscribe)\n    setRostopicForUnsubscribeButtonLoading(false);\n  }\n\n  const handlePublishButtonClick = async () => {\n    setRostopicForPublishButtonLoading(true);\n    const msg = {\n      \"op\": \"publish\",\n      \"topic\": selectedRostopicForPublish,\n      \"msg\": JSON.parse(topicMsg),\n    }\n    await rowma.publishTopic(socket, selectedRobot, msg)\n    setRostopicForPublishButtonLoading(false);\n  }\n\n  const handleTopicMsgChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicMsg((event.target as HTMLInputElement).value);\n  }\n\n  const handlePublishRostopicChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopicForPublish((event.target as HTMLInputElement).value);\n  }\n\n  const handleRostopicUnsubscribeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopicForUnsubscribe((event.target as HTMLInputElement).value)\n  }\n\n  return (\n    <div className={`${classes.root} App`}>\n      <ThemeProvider theme={theme}>\n        <AppBar position=\"static\" className={classes.header}>\n          <Toolbar>\n            <Container className=\"text-left\">\n              <img src=\"/public-console/logo.png\" width=\"28\" height=\"28\" className=\"inline mx-4\" />\n              <Typography variant=\"h5\" className=\"inline align-middle\">Rowma Network Console</Typography>\n            </Container>\n          </Toolbar>\n        </AppBar>\n        <Container>\n          <Grid container spacing={3} className=\"py-8\">\n            <Grid item xs={12} sm={12} md={12}>\n              <Paper className={classes.paper}>\n                <div className=\"flex items-center justify-center\">\n                  <TextField color=\"secondary\" margin=\"dense\" label=\"Network URL\" variant=\"outlined\" className={classes.textField} onChange={handleUrlFieldChange} value={rowmaUrl} />\n                  <div className=\"relative mx-4\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={submitUrlButtonLoading}\n                      onClick={handleConnectNetworkClick}\n                    >\n                      Connect\n                    </Button>\n                    {submitUrlButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select Your Robot{\"'\"}s UUID</Typography>\n                    </div>\n                    {(!robotUuids || (robotUuids && robotUuids.length === 0)) &&\n                      <p>Robot not found...</p>\n                    }\n                    <RadioGroup aria-label=\"robots\" name=\"robots\" value={selectedRobot} onChange={handleRobotChange} className={classes.radioGroup}>\n                    {robotUuids && robotUuids.map(uuid => {\n                      return (\n                        <FormControlLabel value={uuid} control={<Radio />} label={uuid} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={connectButtonLoading || !selectedRobot}\n                    onClick={handleConnectClicked}\n                  >\n                    Connect\n                  </Button>\n                  {connectButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select a rosrun command</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rosrun\" name=\"rosrun\" value={selectedRosrunCommand} onChange={handleRosrunCommandChange} className={classes.radioGroup}>\n                    {rosrunCommands && rosrunCommands.map(command => {\n                      return (\n                        <FormControlLabel value={command} control={<Radio />} label={command} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rosrunButtonLoading || selectedRosrunCommand === ''}\n                    onClick={handleRosrunButtonClick}\n                  >\n                    Execute\n                  </Button>\n                  {rosrunButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select a roslaunch command</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"roslaunch\" name=\"roslaunch\" value={selectedRoslaunchCommand} onChange={handleRoslaunchCommandChange} className={classes.radioGroup}>\n                    {roslaunchCommands && roslaunchCommands.map(command => {\n                      return (\n                        <FormControlLabel value={command} control={<Radio />} label={command} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={roslaunchButtonLoading || selectedRoslaunchCommand === ''}\n                    onClick={handleRoslaunchButtonClick}\n                  >\n                    Execute\n                  </Button>\n                  {roslaunchButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Running ROS nodes</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rosnodes\" name=\"rosnodes\" value={selectedRosnode} onChange={handleRosnodeChange} className={classes.radioGroup}>\n                    {rosnodes && rosnodes.map((node: any) => {\n                      return (\n                        <FormControlLabel value={node} control={<Radio />} label={node} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rosnodeButtonLoading || selectedRosnode === ''}\n                    onClick={handleRosnodeButtonClick}\n                  >\n                    Kill\n                  </Button>\n                  {rosnodeButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8}>\n              <Paper className={classes.paper}>\n                <div className=\"flex\">\n                  <div className=\"w-1/3\">\n                    <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                      <div className=\"my-4\">\n                        <Typography variant='h5'>Subscribe rostopic</Typography>\n                      </div>\n                      <RadioGroup aria-label=\"rostopics\" name=\"rostopics\" value={selectedRostopic} onChange={handleRostopicChange} className={classes.radioGroup}>\n                        {rostopics && rostopics.map((topic: any) => {\n                          return (\n                            <FormControlLabel value={topic} control={<Radio />} label={topic} />\n                          )\n                        })}\n                      </RadioGroup>\n                    </FormControl>\n                    <div className=\"relative\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={rostopicButtonLoading || selectedRostopic === ''}\n                        onClick={handleSubscribeButtonClick}\n                      >\n                        Subscribe\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"w-2/3\">\n                    <ListComponent />\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Unsubscribe rostopic</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rostopics\" name=\"rostopics\" value={selectedRostopicForUnsubscribe} onChange={handleRostopicUnsubscribeChange} className={classes.radioGroup}>\n                    {rostopics && rostopics.map((topic: any) => {\n                      return (\n                        <FormControlLabel value={topic} control={<Radio />} label={topic} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rostopicForUnsubscribeButtonLoading || selectedRostopicForUnsubscribe === ''}\n                    onClick={handleUnsubscribeButtonClick}\n                  >\n                    Unsubscribe\n                  </Button>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8}>\n              <Paper className={classes.paper}>\n                <div className=\"flex\">\n                  <div className=\"w-1/3\">\n                    <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                      <div className=\"my-4\">\n                        <Typography variant='h5'>Publish rostopic</Typography>\n                      </div>\n                      <RadioGroup aria-label=\"rostopics\" name=\"rostopics\" value={selectedRostopicForPublish} onChange={handlePublishRostopicChange} className={classes.radioGroup}>\n                        {rostopics && rostopics.map((topic: any) => {\n                          return (\n                            <FormControlLabel value={topic} control={<Radio />} label={topic} />\n                          )\n                        })}\n                      </RadioGroup>\n                    </FormControl>\n                    <div className=\"relative\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={rostopicForPublishButtonLoading || selectedRostopicForPublish === ''}\n                        onClick={handlePublishButtonClick}\n                      >\n                        Publish\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"w-2/3\">\n                    <TextField\n                      className=\"border\"\n                      label=\"Write your topic\"\n                      multiline\n                      rows=\"15\"\n                      placeholder='{\"data\": \"This is a sample for std_msgs/String\"}'\n                      color=\"secondary\"\n                      fullWidth\n                      variant=\"outlined\"\n                      onChange={handleTopicMsgChange}\n                      value={topicMsg}\n                    />\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n            <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                <div>\n                  <p>Send (Topic Selectbox) from (Robot Selectbox) to (Robot Selectbox)</p>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Paper className={classes.info}>\n                <div className=\"my-4\">\n                  <Typography variant=\"h6\">Network Information</Typography>\n                </div>\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Grid item xs={12} sm={12} md={6}>\n                    <TableContainer className=\"pb-4\">\n                      <Table aria-label=\"simple table\">\n                        <TableBody>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Name</TableCell>\n                            <TableCell align=\"right\">{networkInformation.name}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Type</TableCell>\n                            <TableCell align=\"right\">{networkInformation.type}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network URL</TableCell>\n                            <TableCell align=\"right\">{networkInformation.url}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Location</TableCell>\n                            <TableCell align=\"right\">{networkInformation.location}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Owner</TableCell>\n                            <TableCell align=\"right\">{networkInformation.owner}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Version</TableCell>\n                            <TableCell align=\"right\">{networkInformation.version}</TableCell>\n                          </TableRow>\n\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Box className={classes.footer} fontSize={16}>\n                <Link className={classes.footerLink} href=\"\">How to Use This Page</Link>\n                <Link className={classes.footerLink} href=\"https://rowma.github.io/documentation/en/getting-started\">Documentation</Link>\n                <Link className={classes.footerLink} href=\"https://github.com/rowma/rowma\">GitHub</Link>\n              </Box>\n            </Grid>\n\n          </Grid>\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './tailwind.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}