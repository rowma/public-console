{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","secondary","contrastThreshold","tonalOffset","typography","button","textTransform","useStyles","makeStyles","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","paper","padding","textAlign","color","text","background","radioButtons","maxHeight","minHeight","overflow","info","header","footer","footerLink","radioGroup","textField","width","buttonProgress","green","position","top","left","marginTop","marginLeft","sleep","ms","Promise","resolve","setTimeout","emptyNetworkInformation","name","type","location","owner","version","url","App","React","useState","rowmaUrl","setRowmaUrl","rowma","setRowma","undefined","robotUuids","setRobotUuids","selectedRobot","setSelectedRobot","rosrunCommands","setRosrunCommands","selectedRosrunCommand","setSelectedRosrunCommand","roslaunchCommands","setRoslaunchCommands","rosnodes","setRosnodes","selectedRoslaunchCommand","setSelectedRoslaunchCommand","selectedRosnode","setSelectedRosnode","setRobot","submitUrlButtonLoading","setSubmitUrlButtonLoading","connectButtonLoading","setConnectButtonLoading","rosrunButtonLoading","setRosrunButtonLoading","roslaunchButtonLoading","setRoslaunchButtonLoading","rosnodeButtonLoading","setRosnodeButtonLoading","networkInformation","setNetworkInformation","socket","setSocket","classes","handleConnectNetworkClick","a","_rowma","Rowma","baseURL","getNetworkInformation","networkInfo","data","currentConnectionList","connList","map","robot","uuid","handleRosrunButtonClick","runRosrun","getRobotStatus","_robot","handleRoslaunchButtonClick","runLaunch","handleRosnodeChange","event","target","value","handleRosnodeButtonClick","killNodes","status","index","indexOf","splice","className","ThemeProvider","AppBar","Toolbar","Container","Typography","variant","Grid","container","item","xs","sm","md","Paper","TextField","margin","label","onChange","Button","disabled","onClick","CircularProgress","size","FormControl","component","length","RadioGroup","aria-label","FormControlLabel","control","Radio","connect","then","sock","catch","e","console","log","res","launchCommands","command","node","direction","justify","alignItems","TableContainer","Table","TableBody","TableRow","TableCell","scope","align","Box","fontSize","Link","href","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b5cd0f4a.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n\nimport { createMuiTheme, makeStyles, ThemeProvider, Theme, createStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport TextField from '@material-ui/core/TextField';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\n\n// @ts-ignore\nimport Rowma from 'rowma_js';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffffff',\n    },\n    secondary: {\n      main: '#38B48B',\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n  typography: {\n    button: {\n      textTransform: 'none'\n    }\n  }\n});\n\nconst useStyles = makeStyles((theme: Theme) => (\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      background: '#fdfdfd'\n    },\n    radioButtons: {\n      maxHeight: 300,\n      minHeight: 300,\n      textAlign: 'center',\n      overflow: 'auto'\n    },\n    info: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      background: '#f6f6f6'\n    },\n    header: {\n      color: theme.palette.text.primary,\n      background: '#fcfcfc'\n    },\n    footer: {\n      textAlign: 'left',\n    },\n    footerLink: {\n      color: '#38B48B',\n      marginRight: '1rem',\n    },\n    radioGroup: {\n      textAlign: 'left',\n    },\n    textField: {\n      width: '60%',\n    },\n    buttonProgress: {\n      color: green[500],\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      marginTop: -12,\n      marginLeft: -12,\n    },\n  })\n));\n\nconst sleep = (ms: number) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\ninterface NetworkInformationInterface {\n  name: string;\n  type: string;\n  location: string;\n  owner: string;\n  version: string;\n  url: string;\n}\n\nconst emptyNetworkInformation: NetworkInformationInterface = {\n  name: '',\n  type: '',\n  location: '',\n  owner: '',\n  version: '',\n  url: ''\n}\n\nconst App: React.FC = () => {\n  const [rowmaUrl, setRowmaUrl] = React.useState<string>(\"https://rocky-peak-54058.herokuapp.com\");\n  const [rowma, setRowma] = React.useState<any>(null);\n  const [robotUuids, setRobotUuids] = React.useState<Array<string> | undefined>(undefined);\n  const [selectedRobot, setSelectedRobot] = React.useState<any | null>(null);\n  const [rosrunCommands, setRosrunCommands] = React.useState<Array<string>>([]);\n  const [selectedRosrunCommand, setSelectedRosrunCommand] = React.useState<string>('');\n  const [roslaunchCommands, setRoslaunchCommands] = React.useState<Array<string>>([]);\n  const [rosnodes, setRosnodes] = React.useState<Array<string>>([]);\n  const [selectedRoslaunchCommand, setSelectedRoslaunchCommand] = React.useState<string>('');\n  const [selectedRosnode, setSelectedRosnode] = React.useState<string>('');\n  const [robot, setRobot] = React.useState<any>({});\n  const [submitUrlButtonLoading, setSubmitUrlButtonLoading] = React.useState<boolean>(false);\n  const [connectButtonLoading, setConnectButtonLoading] = React.useState<boolean>(false);\n  const [rosrunButtonLoading, setRosrunButtonLoading] = React.useState<boolean>(false);\n  const [roslaunchButtonLoading, setRoslaunchButtonLoading] = React.useState<boolean>(false);\n  const [rosnodeButtonLoading, setRosnodeButtonLoading] = React.useState<boolean>(false);\n  const [networkInformation, setNetworkInformation] = React.useState<any>(emptyNetworkInformation);\n\n  const [socket, setSocket] = React.useState<any>(null);\n\n  const classes = useStyles();\n\n  const handleUrlFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowmaUrl((event.target as HTMLInputElement).value);\n  }\n\n  const handleConnectNetworkClick = async () => {\n    setSubmitUrlButtonLoading(true);\n    const _rowma = new Rowma({ baseURL: rowmaUrl })\n    setRowma(_rowma);\n\n    const networkInfo = await _rowma.getNetworkInformation()\n    setNetworkInformation({ url: rowmaUrl, ...networkInfo.data })\n\n    const connList = await _rowma.currentConnectionList()\n    setRobotUuids(connList.data.map((robot: any) => robot.uuid));\n\n    setRobot({})\n    setRosrunCommands([]);\n    setRoslaunchCommands([]);\n\n    setSubmitUrlButtonLoading(false);\n  }\n\n  const handleRobotChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRobot((event.target as HTMLInputElement).value);\n  };\n\n  const handleConnectClicked = () => {\n    setConnectButtonLoading(true);\n    rowma.connect(selectedRobot).then((sock: any) => {\n      setSocket(sock)\n    }).catch((e: any) => {\n      console.log(e)\n    })\n\n    rowma.getRobotStatus(selectedRobot).then((res: any) => {\n      setRobot(res.data)\n      setRosnodes(res.data.rosnodes)\n      setRosrunCommands(res.data.rosrunCommands);\n      setRoslaunchCommands(res.data.launchCommands);\n      setConnectButtonLoading(false);\n    })\n  }\n\n  const handleRosrunCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosrunCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRoslaunchCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRoslaunchCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRosrunButtonClick = async () => {\n    setRosrunButtonLoading(true);\n    setRosnodeButtonLoading(true);\n    const rosrunArgs = '';\n    await rowma.runRosrun(socket, selectedRobot, selectedRosrunCommand, rosrunArgs);\n    setRosrunButtonLoading(false);\n    await sleep(2500);\n    const _robot = await rowma.getRobotStatus(selectedRobot)\n    setRosnodes(_robot.data.rosnodes)\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleRoslaunchButtonClick = async () => {\n    setRoslaunchButtonLoading(true);\n    setRosnodeButtonLoading(true);\n    const result = await rowma.runLaunch(socket, selectedRobot, selectedRoslaunchCommand)\n    setRoslaunchButtonLoading(false);\n    await sleep(2500);\n    const _robot = await rowma.getRobotStatus(selectedRobot)\n    setRosnodes(_robot.data.rosnodes)\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleRosnodeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosnode((event.target as HTMLInputElement).value);\n  }\n\n  const handleRosnodeButtonClick = async () => {\n    setRosnodeButtonLoading(true);\n    const result = await rowma.killNodes(socket, selectedRobot, [selectedRosnode]);\n    if (result.status === 'success') {\n      const index = rosnodes.indexOf(selectedRosnode)\n      rosnodes.splice(index, 1);\n    }\n    setRosnodeButtonLoading(false);\n  }\n\n  return (\n    <div className={`${classes.root} App`}>\n      <ThemeProvider theme={theme}>\n        <AppBar position=\"static\" className={classes.header}>\n          <Toolbar>\n            <Container>\n              <Typography variant=\"h5\">Rowma Network Console</Typography>\n            </Container>\n          </Toolbar>\n        </AppBar>\n        <Container>\n          <Grid container spacing={3} className=\"py-8\">\n            <Grid item xs={12} sm={12} md={12}>\n              <Paper className={classes.paper}>\n                <div className=\"flex items-center justify-center\">\n                  <TextField color=\"secondary\" margin=\"dense\" label=\"Network URL\" variant=\"outlined\" className={classes.textField} onChange={handleUrlFieldChange} value={rowmaUrl} />\n                  <div className=\"relative mx-4\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={submitUrlButtonLoading}\n                      onClick={handleConnectNetworkClick}\n                    >\n                      Connect\n                    </Button>\n                    {submitUrlButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select Your Robot{\"'\"}s UUID</Typography>\n                    </div>\n                    {(!robotUuids || (robotUuids && robotUuids.length === 0)) &&\n                      <p>Robot not found...</p>\n                    }\n                    <RadioGroup aria-label=\"robots\" name=\"robots\" value={selectedRobot} onChange={handleRobotChange} className={classes.radioGroup}>\n                    {robotUuids && robotUuids.map(uuid => {\n                      return (\n                        <FormControlLabel value={uuid} control={<Radio />} label={uuid} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={connectButtonLoading || !selectedRobot}\n                    onClick={handleConnectClicked}\n                  >\n                    Connect\n                  </Button>\n                  {connectButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select a rosrun command</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rosrun\" name=\"rosrun\" value={selectedRosrunCommand} onChange={handleRosrunCommandChange} className={classes.radioGroup}>\n                    {rosrunCommands && rosrunCommands.map(command => {\n                      return (\n                        <FormControlLabel value={command} control={<Radio />} label={command} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rosrunButtonLoading || selectedRosrunCommand === ''}\n                    onClick={handleRosrunButtonClick}\n                  >\n                    Execute\n                  </Button>\n                  {rosrunButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select a roslaunch command</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"roslaunch\" name=\"roslaunch\" value={selectedRoslaunchCommand} onChange={handleRoslaunchCommandChange} className={classes.radioGroup}>\n                    {roslaunchCommands && roslaunchCommands.map(command => {\n                      return (\n                        <FormControlLabel value={command} control={<Radio />} label={command} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={roslaunchButtonLoading || selectedRoslaunchCommand === ''}\n                    onClick={handleRoslaunchButtonClick}\n                  >\n                    Execute\n                  </Button>\n                  {roslaunchButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Running ROS nodes</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rosnodes\" name=\"rosnodes\" value={selectedRosnode} onChange={handleRosnodeChange} className={classes.radioGroup}>\n                    {rosnodes && rosnodes.map((node: any) => {\n                      return (\n                        <FormControlLabel value={node} control={<Radio />} label={node} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rosnodeButtonLoading || selectedRosnode === ''}\n                    onClick={handleRosnodeButtonClick}\n                  >\n                    Kill\n                  </Button>\n                  {rosnodeButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Subscribe rostopic</Typography>\n                    </div>\n\n                    <RadioGroup aria-label=\"rosnodes\" name=\"rosnodes\" value={selectedRosnode} onChange={handleRosnodeChange} className={classes.radioGroup}>\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {}}\n                  >\n                    Subscribe\n                  </Button>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                <div>\n                  <p>Send (Topic Selectbox) from (Robot Selectbox) to (Robot Selectbox)</p>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Paper className={classes.info}>\n                <div className=\"my-4\">\n                  <Typography variant=\"h6\">Network Information</Typography>\n                </div>\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Grid item xs={12} sm={12} md={6}>\n                    <TableContainer className=\"pb-4\">\n                      <Table aria-label=\"simple table\">\n                        <TableBody>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Name</TableCell>\n                            <TableCell align=\"right\">{networkInformation.name}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Type</TableCell>\n                            <TableCell align=\"right\">{networkInformation.type}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network URL</TableCell>\n                            <TableCell align=\"right\">{networkInformation.url}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Location</TableCell>\n                            <TableCell align=\"right\">{networkInformation.location}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Owner</TableCell>\n                            <TableCell align=\"right\">{networkInformation.owner}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Version</TableCell>\n                            <TableCell align=\"right\">{networkInformation.version}</TableCell>\n                          </TableRow>\n\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Box className={classes.footer} fontSize={16}>\n                <Link className={classes.footerLink} href=\"\">How to Use This Page</Link>\n                <Link className={classes.footerLink} href=\"https://rowma.github.io/documentation/en/getting-started\">Documentation</Link>\n                <Link className={classes.footerLink} href=\"https://github.com/rowma/rowma\">GitHub</Link>\n              </Box>\n            </Grid>\n\n          </Grid>\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './tailwind.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}