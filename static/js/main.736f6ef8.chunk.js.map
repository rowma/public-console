{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","secondary","contrastThreshold","tonalOffset","typography","button","textTransform","useStyles","makeStyles","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","paper","padding","textAlign","color","text","background","radioButtons","maxHeight","minHeight","maxWidth","overflow","info","header","footer","footerLink","radioGroup","textField","width","buttonProgress","green","position","top","left","marginTop","marginLeft","formControl","marginBottom","margin","minWidth","sleep","ms","Promise","resolve","setTimeout","emptyNetworkInformation","name","type","location","owner","version","url","App","React","useState","rowmaUrl","setRowmaUrl","rowma","setRowma","undefined","robotUuids","setRobotUuids","selectedRobot","setSelectedRobot","rosrunCommands","setRosrunCommands","selectedRosrunCommand","setSelectedRosrunCommand","roslaunchCommands","setRoslaunchCommands","rosnodes","setRosnodes","rostopics","setRostopics","topicMsg","setTopicMsg","selectedRoslaunchCommand","setSelectedRoslaunchCommand","selectedRosnode","setSelectedRosnode","selectedRostopic","setSelectedRostopic","selectedRostopicForPublish","setSelectedRostopicForPublish","selectedRostopicForUnsubscribe","setSelectedRostopicForUnsubscribe","selectedR2rRostopic","setSelectedR2rRostopic","selectedDestinationRobot","setSelectedDestinationRobot","setRobot","submitUrlButtonLoading","setSubmitUrlButtonLoading","connectButtonLoading","setConnectButtonLoading","rosrunButtonLoading","setRosrunButtonLoading","roslaunchButtonLoading","setRoslaunchButtonLoading","rosnodeButtonLoading","setRosnodeButtonLoading","rostopicButtonLoading","setRostopicButtonLoading","rostopicForPublishButtonLoading","setRostopicForPublishButtonLoading","rostopicForUnsubscribeButtonLoading","setRostopicForUnsubscribeButtonLoading","networkInformation","setNetworkInformation","items","setItems","setRoslaunchLog","socket","setSocket","classes","handleConnectNetworkClick","a","_rowma","Rowma","baseURL","getNetworkInformation","networkInfo","data","currentConnectionList","connList","map","robot","uuid","handleOnTopicArrival","event","JSON","stringify","msg","handleRoslaunchLog","console","log","handleRosrunButtonClick","runRosrun","getRobotStatus","_robot","handleRoslaunchButtonClick","runLaunch","handleRosnodeButtonClick","killNodes","status","index","indexOf","splice","handleSubscribeButtonClick","subscribeTopic","Row","style","className","getItemSize","length","handlePublishButtonClick","parse","publishTopic","ThemeProvider","AppBar","Toolbar","Container","src","height","Typography","variant","Grid","container","item","xs","sm","md","Paper","TextField","label","onChange","target","value","Button","disabled","onClick","CircularProgress","size","FormControl","component","RadioGroup","aria-label","FormControlLabel","control","Radio","connect","then","sock","on","catch","e","res","launchCommands","command","node","topic","itemCount","itemSize","initialScrollOffset","unsubscribeTopic","multiline","rows","placeholder","fullWidth","InputLabel","Select","labelId","MenuItem","direction","justify","alignItems","TableContainer","Table","TableBody","TableRow","TableCell","scope","align","Box","fontSize","Link","href","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.736f6ef8.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n\nimport { createMuiTheme, makeStyles, ThemeProvider, Theme, createStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\n\nimport { VariableSizeList } from 'react-window';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\n\n// @ts-ignore\nimport Rowma from 'rowma_js';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffffff',\n    },\n    secondary: {\n      main: '#38B48B',\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n  typography: {\n    button: {\n      textTransform: 'none'\n    }\n  }\n});\n\nconst useStyles = makeStyles((theme: Theme) => (\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      background: '#fdfdfd'\n    },\n    radioButtons: {\n      maxHeight: 300,\n      minHeight: 300,\n      maxWidth: '100%',\n      textAlign: 'center',\n      overflow: 'auto'\n    },\n    info: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      background: '#f6f6f6'\n    },\n    header: {\n      color: theme.palette.text.primary,\n      background: '#fcfcfc'\n    },\n    footer: {\n      textAlign: 'left',\n    },\n    footerLink: {\n      color: '#38B48B',\n      marginRight: '1rem',\n    },\n    radioGroup: {\n      textAlign: 'left',\n    },\n    textField: {\n      width: '60%',\n    },\n    buttonProgress: {\n      color: green[500],\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      marginTop: -12,\n      marginLeft: -12,\n    },\n    formControl: {\n      marginBottom: theme.spacing(3),\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n  })\n));\n\nconst sleep = (ms: number) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\ninterface NetworkInformationInterface {\n  name: string;\n  type: string;\n  location: string;\n  owner: string;\n  version: string;\n  url: string;\n}\n\nconst emptyNetworkInformation: NetworkInformationInterface = {\n  name: '',\n  type: '',\n  location: '',\n  owner: '',\n  version: '',\n  url: ''\n}\n\nconst App: React.FC = () => {\n  const [rowmaUrl, setRowmaUrl] = React.useState<string>(\"https://rowma.moriokalab.com\");\n  const [rowma, setRowma] = React.useState<any>(null);\n  const [robotUuids, setRobotUuids] = React.useState<Array<string> | undefined>(undefined);\n  const [selectedRobot, setSelectedRobot] = React.useState<any | null>(null);\n  const [rosrunCommands, setRosrunCommands] = React.useState<Array<string>>([]);\n  const [selectedRosrunCommand, setSelectedRosrunCommand] = React.useState<string>('');\n  const [roslaunchCommands, setRoslaunchCommands] = React.useState<Array<string>>([]);\n  const [rosnodes, setRosnodes] = React.useState<Array<string>>([]);\n  const [rostopics, setRostopics] = React.useState<Array<string>>([]);\n  const [topicMsg, setTopicMsg] = React.useState<string>('');\n  const [selectedRoslaunchCommand, setSelectedRoslaunchCommand] = React.useState<string>('');\n  const [selectedRosnode, setSelectedRosnode] = React.useState<string>('');\n  const [selectedRostopic, setSelectedRostopic] = React.useState<string>('');\n  const [selectedRostopicForPublish, setSelectedRostopicForPublish] = React.useState<string>('');\n  const [selectedRostopicForUnsubscribe, setSelectedRostopicForUnsubscribe] = React.useState<string>('');\n  const [selectedR2rRostopic, setSelectedR2rRostopic] = React.useState<string>('');\n  const [selectedDestinationRobot, setSelectedDestinationRobot] = React.useState<string>('');\n  const [robot, setRobot] = React.useState<any>({});\n  const [submitUrlButtonLoading, setSubmitUrlButtonLoading] = React.useState<boolean>(false);\n  const [connectButtonLoading, setConnectButtonLoading] = React.useState<boolean>(false);\n  const [rosrunButtonLoading, setRosrunButtonLoading] = React.useState<boolean>(false);\n  const [roslaunchButtonLoading, setRoslaunchButtonLoading] = React.useState<boolean>(false);\n  const [rosnodeButtonLoading, setRosnodeButtonLoading] = React.useState<boolean>(false);\n  const [rostopicButtonLoading, setRostopicButtonLoading] = React.useState<boolean>(false);\n  const [rostopicForPublishButtonLoading, setRostopicForPublishButtonLoading] = React.useState<boolean>(false);\n  const [rostopicForUnsubscribeButtonLoading, setRostopicForUnsubscribeButtonLoading] = React.useState<boolean>(false);\n\n  const [networkInformation, setNetworkInformation] = React.useState<any>(emptyNetworkInformation);\n  const [items, setItems] = React.useState<Array<string>>([]);\n  const [_roslaunchLog, setRoslaunchLog] = React.useState<Array<string>>([]);\n\n  const [socket, setSocket] = React.useState<any>(null);\n\n  const classes = useStyles();\n\n  const handleUrlFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowmaUrl((event.target as HTMLInputElement).value);\n  }\n\n  const handleConnectNetworkClick = async () => {\n    setSubmitUrlButtonLoading(true);\n    const _rowma = new Rowma({ baseURL: rowmaUrl });\n    setRowma(_rowma);\n\n    const networkInfo = await _rowma.getNetworkInformation()\n    setNetworkInformation({ url: rowmaUrl, ...networkInfo.data })\n\n    const connList = await _rowma.currentConnectionList()\n    setRobotUuids(connList.data.map((robot: any) => robot.uuid));\n\n    setRobot({})\n    setRosrunCommands([]);\n    setRoslaunchCommands([]);\n    setRostopics([]);\n\n    setSubmitUrlButtonLoading(false);\n  }\n\n  const handleRobotChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRobot((event.target as HTMLInputElement).value);\n  };\n\n  const handleOnTopicArrival = (event: any) => {\n    setItems(items => [...items, JSON.stringify(event.msg)])\n  }\n\n  const handleRoslaunchLog = (event: any) => {\n    console.log(event)\n    setRoslaunchLog(items => [...items, JSON.stringify(event.log)])\n  }\n\n  const handleConnectClicked = () => {\n    setConnectButtonLoading(true);\n    rowma.connect(selectedRobot).then((sock: any) => {\n      setSocket(sock)\n      sock.on('topic_to_device', handleOnTopicArrival)\n      sock.on('roslaunch_log', handleRoslaunchLog)\n    }).catch((e: any) => {\n      console.log(e)\n    })\n\n    rowma.getRobotStatus(\"\", selectedRobot).then((res: any) => {\n      setRobot(res.data)\n      setRosnodes(res.data.rosnodes)\n      setRosrunCommands(res.data.rosrunCommands);\n      setRoslaunchCommands(res.data.launchCommands);\n      setRostopics(res.data.rostopics);\n      setConnectButtonLoading(false);\n    })\n  }\n\n  const handleRosrunCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosrunCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRoslaunchCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRoslaunchCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRosrunButtonClick = async () => {\n    setRosrunButtonLoading(true);\n    setRosnodeButtonLoading(true);\n    const rosrunArgs = '';\n    await rowma.runRosrun(socket, selectedRobot, selectedRosrunCommand, rosrunArgs);\n    setRosrunButtonLoading(false);\n    await sleep(2500);\n    const _robot = await rowma.getRobotStatus(\"\", selectedRobot)\n    setRosnodes(_robot.data.rosnodes)\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleRoslaunchButtonClick = async () => {\n    setRoslaunchButtonLoading(true);\n    setRosnodeButtonLoading(true);\n    const result = await rowma.runLaunch(socket, selectedRobot, selectedRoslaunchCommand)\n    setRoslaunchButtonLoading(false);\n    await sleep(2500);\n    const _robot = await rowma.getRobotStatus(\"\", selectedRobot)\n    setRosnodes(_robot.data.rosnodes)\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleRosnodeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosnode((event.target as HTMLInputElement).value);\n  }\n\n  const handleRosnodeButtonClick = async () => {\n    setRosnodeButtonLoading(true);\n    const result = await rowma.killNodes(socket, selectedRobot, [selectedRosnode]);\n    if (result.status === 'success') {\n      const index = rosnodes.indexOf(selectedRosnode)\n      rosnodes.splice(index, 1);\n    }\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleSubscribeButtonClick = async () => {\n    setRostopicButtonLoading(true);\n    await rowma.subscribeTopic(socket, selectedRobot, 'application', rowma.uuid, selectedRostopic);\n    setRostopicButtonLoading(false);\n  }\n\n  const handleRostopicChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopic((event.target as HTMLInputElement).value);\n  }\n\n  const Row = ({ index, style }: any) => (\n    <div style={style}>\n      <span className=\"p-4\">{items[index]}</span>\n    </div>\n  );\n\n  const getItemSize = (index: number) => {\n    return items[index] && items[index].length > 60 ? 70 : 30\n  }\n\n  const ListComponent = () => (\n    <VariableSizeList\n      height={300}\n      width={'95%'}\n      itemCount={items.length}\n      itemSize={getItemSize}\n      className=\"border text-left mt-4 mx-4\"\n      initialScrollOffset={items.length * 70}\n    >\n      {Row}\n    </VariableSizeList>\n  );\n\n  const handleUnsubscribeButtonClick = () => {\n    setRostopicForUnsubscribeButtonLoading(true);\n    rowma.unsubscribeTopic(socket, selectedRobot, selectedRostopicForUnsubscribe)\n    setRostopicForUnsubscribeButtonLoading(false);\n  }\n\n  const handlePublishButtonClick = async () => {\n    setRostopicForPublishButtonLoading(true);\n    const msg = {\n      \"op\": \"publish\",\n      \"topic\": selectedRostopicForPublish,\n      \"msg\": JSON.parse(topicMsg),\n    }\n    await rowma.publishTopic(socket, selectedRobot, msg)\n    setRostopicForPublishButtonLoading(false);\n  }\n\n  const handleTopicMsgChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicMsg((event.target as HTMLInputElement).value);\n  }\n\n  const handlePublishRostopicChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopicForPublish((event.target as HTMLInputElement).value);\n  }\n\n  const handleRostopicUnsubscribeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopicForUnsubscribe((event.target as HTMLInputElement).value)\n  }\n\n  const handleTopicSelectboxChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setSelectedR2rRostopic(event.target.value as string);\n  };\n\n  const handleDestinationSelectboxChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setSelectedDestinationRobot(event.target.value as string);\n  };\n\n  const handleSubscribeR2rButtonClick = () => {\n    rowma.subscribeTopic(socket, selectedRobot, 'robot', selectedDestinationRobot, selectedR2rRostopic)\n  }\n\n  return (\n    <div className={`${classes.root} App`}>\n      <ThemeProvider theme={theme}>\n        <AppBar position=\"static\" className={classes.header}>\n          <Toolbar>\n            <Container className=\"text-left\">\n              <img src=\"/public-console/logo.png\" width=\"28\" height=\"28\" className=\"inline mx-4\" />\n              <Typography variant=\"h5\" className=\"inline align-middle\">Rowma Network Console</Typography>\n            </Container>\n          </Toolbar>\n        </AppBar>\n        <Container>\n          <Grid container spacing={3} className=\"py-8\">\n            <Grid item xs={12} sm={12} md={12}>\n              <Paper className={classes.paper}>\n                <div className=\"flex items-center justify-center\">\n                  <TextField color=\"secondary\" margin=\"dense\" label=\"Network URL\" variant=\"outlined\" className={classes.textField} onChange={handleUrlFieldChange} value={rowmaUrl} />\n                  <div className=\"relative mx-4\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={submitUrlButtonLoading}\n                      onClick={handleConnectNetworkClick}\n                    >\n                      Connect\n                    </Button>\n                    {submitUrlButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select Your Robot{\"'\"}s UUID</Typography>\n                    </div>\n                    {(!robotUuids || (robotUuids && robotUuids.length === 0)) &&\n                      <p>Robot not found...</p>\n                    }\n                    <RadioGroup aria-label=\"robots\" name=\"robots\" value={selectedRobot} onChange={handleRobotChange} className={classes.radioGroup}>\n                    {robotUuids && robotUuids.map(uuid => {\n                      return (\n                        <FormControlLabel value={uuid} control={<Radio />} label={uuid} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={connectButtonLoading || !selectedRobot}\n                    onClick={handleConnectClicked}\n                  >\n                    Connect\n                  </Button>\n                  {connectButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select a rosrun command</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rosrun\" name=\"rosrun\" value={selectedRosrunCommand} onChange={handleRosrunCommandChange} className={classes.radioGroup}>\n                    {rosrunCommands && rosrunCommands.map(command => {\n                      return (\n                        <FormControlLabel value={command} control={<Radio />} label={command} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rosrunButtonLoading || selectedRosrunCommand === ''}\n                    onClick={handleRosrunButtonClick}\n                  >\n                    Execute\n                  </Button>\n                  {rosrunButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select a roslaunch command</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"roslaunch\" name=\"roslaunch\" value={selectedRoslaunchCommand} onChange={handleRoslaunchCommandChange} className={classes.radioGroup}>\n                    {roslaunchCommands && roslaunchCommands.map(command => {\n                      return (\n                        <FormControlLabel value={command} control={<Radio />} label={command} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={roslaunchButtonLoading || selectedRoslaunchCommand === ''}\n                    onClick={handleRoslaunchButtonClick}\n                  >\n                    Execute\n                  </Button>\n                  {roslaunchButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Running ROS nodes</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rosnodes\" name=\"rosnodes\" value={selectedRosnode} onChange={handleRosnodeChange} className={classes.radioGroup}>\n                    {rosnodes && rosnodes.map((node: any) => {\n                      return (\n                        <FormControlLabel value={node} control={<Radio />} label={node} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rosnodeButtonLoading || selectedRosnode === ''}\n                    onClick={handleRosnodeButtonClick}\n                  >\n                    Kill\n                  </Button>\n                  {rosnodeButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8}>\n              <Paper className={classes.paper}>\n                <div className=\"flex\">\n                  <div className=\"w-1/3\">\n                    <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                      <div className=\"my-4\">\n                        <Typography variant='h5'>Subscribe rostopic</Typography>\n                      </div>\n                      <RadioGroup aria-label=\"rostopics\" name=\"rostopics\" value={selectedRostopic} onChange={handleRostopicChange} className={classes.radioGroup}>\n                        {rostopics && rostopics.map((topic: any) => {\n                          return (\n                            <FormControlLabel value={topic} control={<Radio />} label={topic} />\n                          )\n                        })}\n                      </RadioGroup>\n                    </FormControl>\n                    <div className=\"relative\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={rostopicButtonLoading || selectedRostopic === ''}\n                        onClick={handleSubscribeButtonClick}\n                      >\n                        Subscribe\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"w-2/3\">\n                    <ListComponent />\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Unsubscribe rostopic</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rostopics\" name=\"rostopics\" value={selectedRostopicForUnsubscribe} onChange={handleRostopicUnsubscribeChange} className={classes.radioGroup}>\n                    {rostopics && rostopics.map((topic: any) => {\n                      return (\n                        <FormControlLabel value={topic} control={<Radio />} label={topic} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rostopicForUnsubscribeButtonLoading || selectedRostopicForUnsubscribe === ''}\n                    onClick={handleUnsubscribeButtonClick}\n                  >\n                    Unsubscribe\n                  </Button>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8}>\n              <Paper className={classes.paper}>\n                <div className=\"flex\">\n                  <div className=\"w-1/3\">\n                    <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                      <div className=\"my-4\">\n                        <Typography variant='h5'>Publish rostopic</Typography>\n                      </div>\n                      <RadioGroup aria-label=\"rostopics\" name=\"rostopics\" value={selectedRostopicForPublish} onChange={handlePublishRostopicChange} className={classes.radioGroup}>\n                        {rostopics && rostopics.map((topic: any) => {\n                          return (\n                            <FormControlLabel value={topic} control={<Radio />} label={topic} />\n                          )\n                        })}\n                      </RadioGroup>\n                    </FormControl>\n                    <div className=\"relative\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={rostopicForPublishButtonLoading || selectedRostopicForPublish === ''}\n                        onClick={handlePublishButtonClick}\n                      >\n                        Publish\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"w-2/3\">\n                    <TextField\n                      className=\"border\"\n                      label=\"Write your topic\"\n                      multiline\n                      rows=\"15\"\n                      placeholder='{\"data\": \"This is a sample for std_msgs/String\"}'\n                      color=\"secondary\"\n                      fullWidth\n                      variant=\"outlined\"\n                      onChange={handleTopicMsgChange}\n                      value={topicMsg}\n                    />\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n            <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                <div className=\"flex content-center items-center justify-center\">\n                  <span>Send</span>\n                  <FormControl className={classes.formControl}>\n                    <InputLabel>Topic</InputLabel>\n                    <Select\n                      labelId=\"demo-simple-select-label\"\n                      value={selectedR2rRostopic}\n                      onChange={handleTopicSelectboxChange}\n                    >\n                      {rostopics && rostopics.map((topic: any) => (\n                        <MenuItem value={topic}>{topic}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                  <span> from {selectedRobot} to </span>\n                  <FormControl className={classes.formControl}>\n                    <InputLabel>Destination</InputLabel>\n                    <Select\n                      labelId=\"demo-simple-select-label\"\n                      value={selectedDestinationRobot}\n                      onChange={handleDestinationSelectboxChange}\n                    >\n                      {robotUuids && robotUuids.map((uuid: any) => (\n                        <MenuItem value={uuid}>{uuid}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                  <div className=\"relative\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={selectedR2rRostopic === ''}\n                      onClick={handleSubscribeR2rButtonClick}\n                    >\n                      Subscribe\n                    </Button>\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Paper className={classes.info}>\n                <div className=\"my-4\">\n                  <Typography variant=\"h6\">Network Information</Typography>\n                </div>\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Grid item xs={12} sm={12} md={6}>\n                    <TableContainer className=\"pb-4\">\n                      <Table aria-label=\"simple table\">\n                        <TableBody>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Name</TableCell>\n                            <TableCell align=\"right\">{networkInformation.name}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Type</TableCell>\n                            <TableCell align=\"right\">{networkInformation.type}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network URL</TableCell>\n                            <TableCell align=\"right\">{networkInformation.url}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Location</TableCell>\n                            <TableCell align=\"right\">{networkInformation.location}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Owner</TableCell>\n                            <TableCell align=\"right\">{networkInformation.owner}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Version</TableCell>\n                            <TableCell align=\"right\">{networkInformation.version}</TableCell>\n                          </TableRow>\n\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Box className={classes.footer} fontSize={16}>\n                <Link className={classes.footerLink} href=\"\">How to Use This Page</Link>\n                <Link className={classes.footerLink} href=\"https://rowma.github.io/documentation/en/getting-started\">Documentation</Link>\n                <Link className={classes.footerLink} href=\"https://github.com/rowma/rowma\">GitHub</Link>\n              </Box>\n            </Grid>\n\n          </Grid>\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './tailwind.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}