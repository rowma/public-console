{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","secondary","contrastThreshold","tonalOffset","typography","button","textTransform","useStyles","makeStyles","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","paper","padding","textAlign","color","text","background","radioButtons","maxHeight","minHeight","maxWidth","overflow","info","header","footer","footerLink","radioGroup","textField","width","buttonProgress","green","position","top","left","marginTop","marginLeft","formControl","marginBottom","margin","minWidth","sleep","ms","Promise","resolve","setTimeout","emptyNetworkInformation","name","type","location","owner","version","url","App","React","useState","rowmaUrl","setRowmaUrl","rowma","setRowma","undefined","robotUuids","setRobotUuids","selectedRobot","setSelectedRobot","rosrunCommands","setRosrunCommands","selectedRosrunCommand","setSelectedRosrunCommand","roslaunchCommands","setRoslaunchCommands","rosnodes","setRosnodes","rostopics","setRostopics","topicMsg","setTopicMsg","selectedRoslaunchCommand","setSelectedRoslaunchCommand","selectedRosnode","setSelectedRosnode","selectedRostopic","setSelectedRostopic","selectedRostopicForPublish","setSelectedRostopicForPublish","selectedRostopicForUnsubscribe","setSelectedRostopicForUnsubscribe","selectedR2rRostopic","setSelectedR2rRostopic","selectedDestinationRobot","setSelectedDestinationRobot","setRobot","submitUrlButtonLoading","setSubmitUrlButtonLoading","connectButtonLoading","setConnectButtonLoading","rosrunButtonLoading","setRosrunButtonLoading","roslaunchButtonLoading","setRoslaunchButtonLoading","rosnodeButtonLoading","setRosnodeButtonLoading","rostopicButtonLoading","setRostopicButtonLoading","rostopicForPublishButtonLoading","setRostopicForPublishButtonLoading","rostopicForUnsubscribeButtonLoading","setRostopicForUnsubscribeButtonLoading","addScriptButtonLoading","setAddScriptButtonLoading","networkInformation","setNetworkInformation","items","setItems","roslaunchLogs","setRoslaunchLogs","rosrunLogs","setRosrunLogs","scriptName","setScriptName","script","setScript","classes","handleConnectNetworkClick","a","_rowma","Rowma","baseURL","getNetworkInformation","networkInfo","data","currentConnectionList","connList","map","robot","uuid","handleTopicArrival","event","JSON","stringify","msg","handleRoslaunchLog","console","log","logs","handleRosrunLog","handleRosrunButtonClick","runRosrun","getRobotStatus","_robot","handleRoslaunchButtonClick","runLaunch","subscribe","handleRosnodeButtonClick","killNodes","status","index","indexOf","splice","handleSubscribeButtonClick","setTopicRoute","Row","style","className","RoslaunchLogRow","parse","RosrunLogRow","getItemSize","length","getRoslaunchLogItemSize","getRosrunLogItemSize","handlePublishButtonClick","publish","handleUploadScriptButtonClick","addScript","ThemeProvider","AppBar","Toolbar","Container","src","height","Typography","variant","Grid","container","item","xs","sm","md","Paper","TextField","label","onChange","target","value","Button","disabled","onClick","CircularProgress","size","FormControl","component","RadioGroup","aria-label","FormControlLabel","control","Radio","connect","catch","e","error","then","res","launchCommands","data-frameborder","data-allow","data-allowfullscreen","command","itemCount","itemSize","initialScrollOffset","mode","newValue","fontSize","highlightActiveLine","editorProps","$blockScrolling","node","topic","unsubscribeTopic","multiline","rows","placeholder","fullWidth","InputLabel","Select","labelId","MenuItem","direction","justify","alignItems","TableContainer","Table","TableBody","TableRow","TableCell","scope","align","Box","Link","href","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.da3259b4.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n\nimport { createMuiTheme, makeStyles, ThemeProvider, Theme, createStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\n\nimport { VariableSizeList } from 'react-window';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-github\";\n\n// @ts-ignore\nimport Rowma from 'rowma_js';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffffff',\n    },\n    secondary: {\n      main: '#38B48B',\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n  typography: {\n    button: {\n      textTransform: 'none'\n    }\n  }\n});\n\nconst useStyles = makeStyles((theme: Theme) => (\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      background: '#fdfdfd'\n    },\n    radioButtons: {\n      maxHeight: 300,\n      minHeight: 300,\n      maxWidth: '100%',\n      textAlign: 'center',\n      overflow: 'auto'\n    },\n    info: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      background: '#f6f6f6'\n    },\n    header: {\n      color: theme.palette.text.primary,\n      background: '#fcfcfc'\n    },\n    footer: {\n      textAlign: 'left',\n    },\n    footerLink: {\n      color: '#38B48B',\n      marginRight: '1rem',\n    },\n    radioGroup: {\n      textAlign: 'left',\n    },\n    textField: {\n      width: '60%',\n    },\n    buttonProgress: {\n      color: green[500],\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      marginTop: -12,\n      marginLeft: -12,\n    },\n    formControl: {\n      marginBottom: theme.spacing(3),\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n  })\n));\n\nconst sleep = (ms: number) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\ninterface NetworkInformationInterface {\n  name: string;\n  type: string;\n  location: string;\n  owner: string;\n  version: string;\n  url: string;\n}\n\nconst emptyNetworkInformation: NetworkInformationInterface = {\n  name: '',\n  type: '',\n  location: '',\n  owner: '',\n  version: '',\n  url: ''\n}\n\nconst App: React.FC = () => {\n  const [rowmaUrl, setRowmaUrl] = React.useState<string>(\"https://rowma.moriokalab.com\");\n  const [rowma, setRowma] = React.useState<any>(null);\n  const [robotUuids, setRobotUuids] = React.useState<Array<string> | undefined>(undefined);\n  const [selectedRobot, setSelectedRobot] = React.useState<any | null>(null);\n  const [rosrunCommands, setRosrunCommands] = React.useState<Array<string>>([]);\n  const [selectedRosrunCommand, setSelectedRosrunCommand] = React.useState<string>('');\n  const [roslaunchCommands, setRoslaunchCommands] = React.useState<Array<string>>([]);\n  const [rosnodes, setRosnodes] = React.useState<Array<string>>([]);\n  const [rostopics, setRostopics] = React.useState<Array<string>>([]);\n  const [topicMsg, setTopicMsg] = React.useState<string>('');\n  const [selectedRoslaunchCommand, setSelectedRoslaunchCommand] = React.useState<string>('');\n  const [selectedRosnode, setSelectedRosnode] = React.useState<string>('');\n  const [selectedRostopic, setSelectedRostopic] = React.useState<string>('');\n  const [selectedRostopicForPublish, setSelectedRostopicForPublish] = React.useState<string>('');\n  const [selectedRostopicForUnsubscribe, setSelectedRostopicForUnsubscribe] = React.useState<string>('');\n  const [selectedR2rRostopic, setSelectedR2rRostopic] = React.useState<string>('');\n  const [selectedDestinationRobot, setSelectedDestinationRobot] = React.useState<string>('');\n  const [robot, setRobot] = React.useState<any>({});\n  const [submitUrlButtonLoading, setSubmitUrlButtonLoading] = React.useState<boolean>(false);\n  const [connectButtonLoading, setConnectButtonLoading] = React.useState<boolean>(false);\n  const [rosrunButtonLoading, setRosrunButtonLoading] = React.useState<boolean>(false);\n  const [roslaunchButtonLoading, setRoslaunchButtonLoading] = React.useState<boolean>(false);\n  const [rosnodeButtonLoading, setRosnodeButtonLoading] = React.useState<boolean>(false);\n  const [rostopicButtonLoading, setRostopicButtonLoading] = React.useState<boolean>(false);\n  const [rostopicForPublishButtonLoading, setRostopicForPublishButtonLoading] = React.useState<boolean>(false);\n  const [rostopicForUnsubscribeButtonLoading, setRostopicForUnsubscribeButtonLoading] = React.useState<boolean>(false);\n  const [addScriptButtonLoading, setAddScriptButtonLoading] = React.useState<boolean>(false);\n\n  const [networkInformation, setNetworkInformation] = React.useState<any>(emptyNetworkInformation);\n  const [items, setItems] = React.useState<Array<string>>([]);\n  const [_roslaunchLog, setRoslaunchLog] = React.useState<Array<string>>([]);\n  const [roslaunchLogs, setRoslaunchLogs] = React.useState<Array<string>>([]);\n  const [rosrunLogs, setRosrunLogs] = React.useState<Array<string>>([]);\n  const [scriptName, setScriptName] = React.useState<string>(\"\");\n  const [script, setScript] = React.useState<string>(\"\");\n\n  const classes = useStyles();\n\n  const handleUrlFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowmaUrl((event.target as HTMLInputElement).value);\n  }\n\n  const handleConnectNetworkClick = async () => {\n    setSubmitUrlButtonLoading(true);\n    const _rowma = new Rowma({ baseURL: rowmaUrl });\n    setRowma(_rowma);\n\n    const networkInfo = await _rowma.getNetworkInformation()\n    setNetworkInformation({ url: rowmaUrl, ...networkInfo.data })\n\n    const connList = await _rowma.currentConnectionList()\n    setRobotUuids(connList.data.map((robot: any) => robot.uuid));\n\n    setRobot({})\n    setRosrunCommands([]);\n    setRoslaunchCommands([]);\n    setRostopics([]);\n\n    setSubmitUrlButtonLoading(false);\n  }\n\n  const handleRobotChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRobot((event.target as HTMLInputElement).value);\n  };\n\n  const handleTopicArrival = (event: any) => {\n    setItems(items => [...items, JSON.stringify(event.msg)])\n  }\n\n  const handleRoslaunchLog = (event: any) => {\n    console.log(event)\n    setRoslaunchLogs(logs => [...logs, JSON.stringify(event)])\n    // setRoslaunchLog(items => [...items, JSON.stringify(event.log)])\n  }\n\n  const handleRosrunLog = (event: any) => {\n    console.log(event)\n    setRosrunLogs(logs => [...logs, JSON.stringify(event)])\n    // setRosrunLog(items => [...items, JSON.stringify(event.log)])\n  }\n\n  const handleConnectClicked = () => {\n    setConnectButtonLoading(true);\n    rowma.connect().catch((e: any) => {\n      console.error(e)\n    })\n\n    rowma.getRobotStatus(selectedRobot).then((res: any) => {\n      setRobot(res.data)\n      setRosnodes(res.data.rosnodes)\n      setRosrunCommands(res.data.rosrunCommands);\n      setRoslaunchCommands(res.data.launchCommands);\n      setRostopics(res.data.rostopics);\n      setConnectButtonLoading(false);\n    })\n  }\n\n  const handleRosrunCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosrunCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRoslaunchCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRoslaunchCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRosrunButtonClick = async () => {\n    setRosrunButtonLoading(true);\n    setRosnodeButtonLoading(true);\n    const rosrunArgs = '';\n    await rowma.runRosrun(selectedRobot, selectedRosrunCommand, rosrunArgs);\n    setRosrunButtonLoading(false);\n    await sleep(2500);\n    const _robot = await rowma.getRobotStatus(\"\", selectedRobot)\n    setRosnodes(_robot.data.rosnodes)\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleRoslaunchButtonClick = async () => {\n    setRoslaunchButtonLoading(true);\n    setRosnodeButtonLoading(true);\n    const result = await rowma.runLaunch(selectedRobot, selectedRoslaunchCommand)\n    setRoslaunchButtonLoading(false);\n    rowma.subscribe('roslaunch_log', handleRoslaunchLog)\n    rowma.subscribe('rosrun_log', handleRosrunLog)\n    await sleep(2500);\n    const _robot = await rowma.getRobotStatus(\"\", selectedRobot)\n    setRosnodes(_robot.data.rosnodes)\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleRosnodeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosnode((event.target as HTMLInputElement).value);\n  }\n\n  const handleRosnodeButtonClick = async () => {\n    setRosnodeButtonLoading(true);\n    const result = await rowma.killNodes(selectedRobot, [selectedRosnode]);\n    if (result.status === 'success') {\n      const index = rosnodes.indexOf(selectedRosnode)\n      rosnodes.splice(index, 1);\n    }\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleSubscribeButtonClick = async () => {\n    setRostopicButtonLoading(true);\n    await rowma.subscribe(selectedRostopic, handleTopicArrival)\n    await rowma.setTopicRoute(selectedRobot, 'application', rowma.uuid, selectedRostopic);\n    setRostopicButtonLoading(false);\n  }\n\n  const handleRostopicChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopic((event.target as HTMLInputElement).value);\n  }\n\n  const Row = ({ index, style }: any) => (\n    <div style={style}>\n      <span className=\"p-4\">{items[index]}</span>\n    </div>\n  );\n\n  const RoslaunchLogRow = ({ index, style }: any) => (\n    <div style={style}>\n      <span className=\"p-4 text-gray-200\">{JSON.parse(roslaunchLogs[index]).log}</span>\n    </div>\n  );\n\n  const RosrunLogRow = ({ index, style }: any) => (\n    <div style={style}>\n      <span className=\"p-4 text-gray-200\">{JSON.parse(rosrunLogs[index]).log}</span>\n    </div>\n  );\n\n  const getItemSize = (index: number) => {\n    return items[index] && items[index].length > 60 ? 70 : 30\n  }\n\n  const getRoslaunchLogItemSize = (index: number) => {\n    return roslaunchLogs[index] && roslaunchLogs[index].length > 60 ? 50 : 20\n  }\n\n  const getRosrunLogItemSize = (index: number) => {\n    return rosrunLogs[index] && rosrunLogs[index].length > 60 ? 50 : 20\n  }\n\n  const ListComponent = () => (\n    <VariableSizeList\n      height={300}\n      width={'95%'}\n      itemCount={items.length}\n      itemSize={getItemSize}\n      className=\"border text-left mt-4 mx-4\"\n      initialScrollOffset={items.length * 70}\n    >\n      {Row}\n    </VariableSizeList>\n  );\n\n  const RoslaunchLogListComponent = () => (\n    <VariableSizeList\n      height={300}\n      width={'95%'}\n      itemCount={roslaunchLogs.length}\n      itemSize={getRoslaunchLogItemSize}\n      className=\"border text-left my-4 mx-4 bg-gray-700\"\n      initialScrollOffset={roslaunchLogs.length * 70}\n    >\n      {RoslaunchLogRow}\n    </VariableSizeList>\n  );\n\n  const RosrunLogListComponent = () => (\n    <VariableSizeList\n      height={300}\n      width={'95%'}\n      itemCount={rosrunLogs.length}\n      itemSize={getRosrunLogItemSize}\n      className=\"border text-left my-4 mx-4 bg-gray-700\"\n      initialScrollOffset={rosrunLogs.length * 70}\n    >\n      {RosrunLogRow}\n    </VariableSizeList>\n  );\n\n  const handleUnsubscribeButtonClick = () => {\n    setRostopicForUnsubscribeButtonLoading(true);\n    rowma.unsubscribeTopic(selectedRobot, selectedRostopicForUnsubscribe)\n    setRostopicForUnsubscribeButtonLoading(false);\n  }\n\n  const handlePublishButtonClick = async () => {\n    setRostopicForPublishButtonLoading(true);\n    await rowma.publish(selectedRobot, selectedRostopicForPublish, JSON.parse(topicMsg))\n    setRostopicForPublishButtonLoading(false);\n  }\n\n  const handleTopicMsgChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicMsg((event.target as HTMLInputElement).value);\n  }\n\n  const handlePublishRostopicChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopicForPublish((event.target as HTMLInputElement).value);\n  }\n\n  const handleRostopicUnsubscribeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopicForUnsubscribe((event.target as HTMLInputElement).value)\n  }\n\n  const handleTopicSelectboxChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setSelectedR2rRostopic(event.target.value as string);\n  };\n\n  const handleDestinationSelectboxChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setSelectedDestinationRobot(event.target.value as string);\n  };\n\n  const handleSubscribeR2rButtonClick = () => {\n    rowma.setTopicRoute(selectedRobot, 'robot', selectedDestinationRobot, selectedR2rRostopic)\n  }\n\n  const handleScriptNameFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setScriptName((event.target as HTMLInputElement).value);\n  }\n\n  const handleEditorChange = (newValue: string) => {\n    setScript(newValue)\n  }\n\n  const handleUploadScriptButtonClick = async () => {\n    setAddScriptButtonLoading(true)\n    await rowma.addScript(selectedRobot, scriptName, script)\n    setAddScriptButtonLoading(false)\n  }\n\n  return (\n    <div className={`${classes.root} App`}>\n      <ThemeProvider theme={theme}>\n        <AppBar position=\"static\" className={classes.header}>\n          <Toolbar>\n            <Container className=\"text-left\">\n              <img src=\"/public-console/logo.png\" width=\"28\" height=\"28\" className=\"inline mx-4\" />\n              <Typography variant=\"h5\" className=\"inline align-middle\">Rowma Network Console</Typography>\n            </Container>\n          </Toolbar>\n        </AppBar>\n        <Container>\n          <Grid container spacing={3} className=\"py-8\">\n            <Grid item xs={12} sm={12} md={12}>\n              <Paper className={classes.paper}>\n                <div className=\"flex items-center justify-center\">\n                  <TextField color=\"secondary\" margin=\"dense\" label=\"Network URL\" variant=\"outlined\" className={classes.textField} onChange={handleUrlFieldChange} value={rowmaUrl} />\n                  <div className=\"relative mx-4\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={submitUrlButtonLoading}\n                      onClick={handleConnectNetworkClick}\n                    >\n                      Connect\n                    </Button>\n                    {submitUrlButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select Your Robot{\"'\"}s UUID</Typography>\n                    </div>\n                    {(!robotUuids || (robotUuids && robotUuids.length === 0)) &&\n                      <p>Robot not found...</p>\n                    }\n                    <RadioGroup aria-label=\"robots\" name=\"robots\" value={selectedRobot} onChange={handleRobotChange} className={classes.radioGroup}>\n                    {robotUuids && robotUuids.map(uuid => {\n                      return (\n                        <FormControlLabel value={uuid} control={<Radio />} label={uuid} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={connectButtonLoading || !selectedRobot}\n                    onClick={handleConnectClicked}\n                  >\n                    Connect\n                  </Button>\n                  {connectButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8}>\n              <Paper className={`${classes.paper} h-full`}>\n                <div className=\"mx-4 mt-4\">\n                  <iframe width={560} height={315} src=\"https://www.youtube.com/embed/7Rl0_7da47k\" data-frameborder=\"0\" data-allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" data-allowfullscreen></iframe>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select a rosrun command</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rosrun\" name=\"rosrun\" value={selectedRosrunCommand} onChange={handleRosrunCommandChange} className={classes.radioGroup}>\n                    {rosrunCommands && rosrunCommands.map(command => {\n                      return (\n                        <FormControlLabel value={command} control={<Radio />} label={command} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rosrunButtonLoading || selectedRosrunCommand === ''}\n                    onClick={handleRosrunButtonClick}\n                  >\n                    Execute\n                  </Button>\n                  {rosrunButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8}>\n              <Paper className={classes.paper}>\n                <RosrunLogListComponent />\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Select a roslaunch command</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"roslaunch\" name=\"roslaunch\" value={selectedRoslaunchCommand} onChange={handleRoslaunchCommandChange} className={classes.radioGroup}>\n                    {roslaunchCommands && roslaunchCommands.map(command => {\n                      return (\n                        <FormControlLabel value={command} control={<Radio />} label={command} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={roslaunchButtonLoading || selectedRoslaunchCommand === ''}\n                    onClick={handleRoslaunchButtonClick}\n                  >\n                    Execute\n                  </Button>\n                  {roslaunchButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8}>\n              <Paper className={classes.paper}>\n                <RoslaunchLogListComponent />\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={12}>\n              <Paper className={classes.paper}>\n                <div>\n                  <Typography variant='h5'>Add Script</Typography>\n                  <div className=\"my-4\"><span>Caution: There is a possibility of arbitrary code execution when you use script addition feature, therefore, you should watch out testing this feature. Add <b>ENABLE_SCRIPT_DOWNLOAD=True</b> to rosrun rowma_ros rowma command if you use this feature.</span></div>\n                </div>\n\n                <div className=\"flex items-center justify-center\">\n                  <TextField color=\"secondary\" margin=\"dense\" label=\"Script Name*\" variant=\"outlined\" className={classes.textField} onChange={handleScriptNameFieldChange} value={scriptName} />\n                </div>\n\n                <AceEditor\n                  mode=\"python\"\n                  theme=\"github\"\n                  value={script}\n                  onChange={handleEditorChange}\n                  name=\"public-console-editor\"\n                  width=\"100%\"\n                  fontSize={18}\n                  highlightActiveLine={false}\n                  className=\"bg-gray-700 text-gray-200\"\n                  editorProps={{ $blockScrolling: true }}\n                />\n\n                <div className=\"relative mt-4\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={roslaunchButtonLoading || script === '' || scriptName === ''}\n                    onClick={handleUploadScriptButtonClick}\n                  >\n                    Upload\n                  </Button>\n                  {addScriptButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Running ROS nodes</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rosnodes\" name=\"rosnodes\" value={selectedRosnode} onChange={handleRosnodeChange} className={classes.radioGroup}>\n                    {rosnodes && rosnodes.map((node: any) => {\n                      return (\n                        <FormControlLabel value={node} control={<Radio />} label={node} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rosnodeButtonLoading || selectedRosnode === ''}\n                    onClick={handleRosnodeButtonClick}\n                  >\n                    Kill\n                  </Button>\n                  {rosnodeButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8}>\n              <Paper className={classes.paper}>\n                <div className=\"flex\">\n                  <div className=\"w-1/3\">\n                    <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                      <div className=\"my-4\">\n                        <Typography variant='h5'>Subscribe rostopic</Typography>\n                      </div>\n                      <RadioGroup aria-label=\"rostopics\" name=\"rostopics\" value={selectedRostopic} onChange={handleRostopicChange} className={classes.radioGroup}>\n                        {rostopics && rostopics.map((topic: any) => {\n                          return (\n                            <FormControlLabel value={topic} control={<Radio />} label={topic} />\n                          )\n                        })}\n                      </RadioGroup>\n                    </FormControl>\n                    <div className=\"relative\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={rostopicButtonLoading || selectedRostopic === ''}\n                        onClick={handleSubscribeButtonClick}\n                      >\n                        Subscribe\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"w-2/3\">\n                    <ListComponent />\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={4}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>Unsubscribe rostopic</Typography>\n                    </div>\n                    <RadioGroup aria-label=\"rostopics\" name=\"rostopics\" value={selectedRostopicForUnsubscribe} onChange={handleRostopicUnsubscribeChange} className={classes.radioGroup}>\n                    {rostopics && rostopics.map((topic: any) => {\n                      return (\n                        <FormControlLabel value={topic} control={<Radio />} label={topic} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rostopicForUnsubscribeButtonLoading || selectedRostopicForUnsubscribe === ''}\n                    onClick={handleUnsubscribeButtonClick}\n                  >\n                    Unsubscribe\n                  </Button>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8}>\n              <Paper className={classes.paper}>\n                <div className=\"flex\">\n                  <div className=\"w-1/3\">\n                    <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                      <div className=\"my-4\">\n                        <Typography variant='h5'>Publish rostopic</Typography>\n                      </div>\n                      <RadioGroup aria-label=\"rostopics\" name=\"rostopics\" value={selectedRostopicForPublish} onChange={handlePublishRostopicChange} className={classes.radioGroup}>\n                        {rostopics && rostopics.map((topic: any) => {\n                          return (\n                            <FormControlLabel value={topic} control={<Radio />} label={topic} />\n                          )\n                        })}\n                      </RadioGroup>\n                    </FormControl>\n                    <div className=\"relative\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={rostopicForPublishButtonLoading || selectedRostopicForPublish === ''}\n                        onClick={handlePublishButtonClick}\n                      >\n                        Publish\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"w-2/3\">\n                    <TextField\n                      className=\"border\"\n                      label=\"Write your topic\"\n                      multiline\n                      rows=\"15\"\n                      placeholder='{\"data\": \"This is a sample for std_msgs/String\"}'\n                      color=\"secondary\"\n                      fullWidth\n                      variant=\"outlined\"\n                      onChange={handleTopicMsgChange}\n                      value={topicMsg}\n                    />\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n            <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                <div className=\"flex content-center items-center justify-center\">\n                  <span>Send</span>\n                  <FormControl className={classes.formControl}>\n                    <InputLabel>Topic</InputLabel>\n                    <Select\n                      labelId=\"demo-simple-select-label\"\n                      value={selectedR2rRostopic}\n                      onChange={handleTopicSelectboxChange}\n                    >\n                      {rostopics && rostopics.map((topic: any) => (\n                        <MenuItem value={topic}>{topic}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                  <span> from {selectedRobot} to </span>\n                  <FormControl className={classes.formControl}>\n                    <InputLabel>Destination</InputLabel>\n                    <Select\n                      labelId=\"demo-simple-select-label\"\n                      value={selectedDestinationRobot}\n                      onChange={handleDestinationSelectboxChange}\n                    >\n                      {robotUuids && robotUuids.map((uuid: any) => (\n                        <MenuItem value={uuid}>{uuid}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                  <div className=\"relative\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={selectedR2rRostopic === ''}\n                      onClick={handleSubscribeR2rButtonClick}\n                    >\n                      Subscribe\n                    </Button>\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Paper className={classes.info}>\n                <div className=\"my-4\">\n                  <Typography variant=\"h6\">Network Information</Typography>\n                </div>\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Grid item xs={12} sm={12} md={6}>\n                    <TableContainer className=\"pb-4\">\n                      <Table aria-label=\"simple table\">\n                        <TableBody>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Name</TableCell>\n                            <TableCell align=\"right\">{networkInformation.name}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Type</TableCell>\n                            <TableCell align=\"right\">{networkInformation.type}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network URL</TableCell>\n                            <TableCell align=\"right\">{networkInformation.url}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Location</TableCell>\n                            <TableCell align=\"right\">{networkInformation.location}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Owner</TableCell>\n                            <TableCell align=\"right\">{networkInformation.owner}</TableCell>\n                          </TableRow>\n                          <TableRow>\n                            <TableCell scope=\"row\">Network Version</TableCell>\n                            <TableCell align=\"right\">{networkInformation.version}</TableCell>\n                          </TableRow>\n\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Box className={classes.footer} fontSize={16}>\n                <Link className={classes.footerLink} href=\"\">How to Use This Page</Link>\n                <Link className={classes.footerLink} href=\"https://rowma.github.io/documentation/en/getting-started\">Documentation</Link>\n                <Link className={classes.footerLink} href=\"https://github.com/rowma/rowma\">GitHub</Link>\n              </Box>\n            </Grid>\n\n          </Grid>\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './tailwind.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}